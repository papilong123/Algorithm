int (Sqtree T,int i,int j){
//本算法在二叉树中查找结点i和结点j的最近公共祖先
    if(T[i]!='#'&&T[j]!='#')
        while(i!=j){
            if(i>j)
            i=i/2;
            else
            j=j/2;
        }
        return T[i];
    }//if
}

void InOrder(Bitree T){
//中序遍历的非递归算法，借助栈
InitStack(S); BiTree p=T;
    while(p||!IsEmpty(s)){
        if(p){
            Push(S,p);
            p=p->lchild;
        }
        else{
            Pop(S,p);visit(p);
            p=p->rchild;
        }
    }//while
}

void (BiTree T){
//层序遍历的非递归算法，借助队列
Init(Q)
BiTree p;
EnQueue(Q,T);
while(!IsEmpty(Q)){
    DeQueue(Q,p);
    visit(p);
    if(p->lchild!=NULL)
        EnQueue(Q,p->lchild);
    if(p->rchild!=NULL)
        EnQueue(Q,p->rchild);
}//while
}

void InThread(ThreadTree &p,ThreadTree &pre)
//线索二叉树的中序遍历
















































