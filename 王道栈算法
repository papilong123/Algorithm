int f(char A[ ]){
//栈的输入输出合法性判断
  int i=j=k=0;
  while(A[i]!='\0'){
    switch(A[i]):{
        case 'I':k++;break;
        case 'O':j++;
        if(k>j){print("wrong answer");   return 0;}
        i++;
   }
   if(j!=k)
   printf("wrong anwser");
   return 0;
   else{
        printf("right!");
   return 1;
}

int f(Linklist L){
//判断链表是不是回文，借助栈
    char A[n/2];
    int top=-1;
    p=L->next;
    for(i=0;i<n/2;i++){
        A[i]=p->data;
        p=p->next;
        }
    i--;
    if(n/2==1)
    p=p->next;
    while(p!=NULL&&A[i]==p->data){
        i--;
        p=p->next;
    }
    if(i==-1)
        return 1;
    else
        return 0;
}

int push(int i, elemtp x){
//共享栈入栈
    if(i<0||i>1){
        printf("wrong");
        exit(0);
     }
    if(s.top[1]-s.top[0]==1)
        printf("stack is full");
        return 0;
    switch(i){
        case 0: s.stack[++s.top[0]]=x;reutrn 1; break;
        case 1: s.stack[--s.top[0]]=x;
    }
}

int pop(int i){
//共享栈出栈
    if(i<0||i>1){
        printf("wrong");
        exit(0);
     }
    switch(i){
        case 0:
            if(s.top[0]=-1){
            printf("empty");
            return-1;
            }
            else
            return s.stack[s.top[0]--];
        case 1:
            if(s.top[1]==maxsize){
                printf("empty");
                return -1;
            }
            else
                return s.stack[s.top[1]++];
    }//switch
}









